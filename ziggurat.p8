pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--main


function _init()
	draw=strategicv_draw
	update=strategicv_update
	
	make_camera()
	make_cursor()
	init_map()
end

function _draw()
	draw()
end

function _update()
	update()
end

function make_camera()
end

function make_cursor()

end


-->8
--map

-- tiles
sand=4
river=5
fldpln=22

-- directions
-- w=1,sw=2,s=3,se=4,e=5
-- ne=6,n=7,nw=8
dirx={-1,-1,0,1,1,1,0,-1}
diry={ 0, 1,1,1,0,1,1, 1}

function generate_map()
	-- fill with blank tiles
	for x=1,map_size do
		for y=1,map_size do
		 if (map_tiles[x] == nil) then
				map_tiles[x] = {}
			end
		 map_tiles[x][y] = sand
		end
	end
	
	-- spawn rivers
	for i=1,flr(rnd(4))+2 do
		local river_x=flr(rnd(128))+1
		local river_y=1

		while (river_y <= 128) do
			map_tiles[river_x][river_y]=river
		
			spread_fldplns(river_x,river_y,2)
			
			-- no north dirs, flows
			-- south
			local rnd_dir=flr(rnd(5))+1
			river_x+=dirx[rnd_dir]
			river_y+=diry[rnd_dir]
			
			if (river_x < 1 or river_x > 127) then
				break
			end
		end
	end
end

function spread_fldplns(x,y,n)
	if (n==0) return
		
	for i=1,8 do
		fldpln_x=x+dirx[i]
		fldpln_y=y+diry[i]
		if (
			in_bounds(fldpln_x,fldpln_y)
			and map_tiles[fldpln_x][fldpln_y] != river
		) then
			map_tiles[fldpln_x][fldpln_y]=fldpln
			spread_fldplns(fldpln_x,fldpln_y,n-1)
		end
	end
end

function init_map()
	generate_map()
end

function draw_map()
 for scrn_x=0,16 do
 	for scrn_y=0,16 do
 		x = scrn_x + cmra.x
 		y = scrn_y + cmra.y

 		map_tile = map_tiles[x][y]
 		spr(
 			map_tile,
 			(scrn_x)*8,
 			(scrn_y)*8
 		)
 	end
 end
end

function in_bounds(x,y)
	return x <= map_size
		and x > 0
		and y <= map_size
		and y > 0
end

-->8
--util

function log(txt)
	printh("debug: "..txt, "debug.txt")
end

function move_xy(_btn,x,y,mag)
	local xdir={-1,1,0,0}
	local ydir={0,0,-1,1}
	return x+xdir[_btn+1]*mag,y+ydir[_btn+1]*mag
end
-->8
--strategic view

function strategicv_update()
	move_cursor()
	handle_minimap()
end

function strategicv_draw()
	cls()
	draw_map()
	draw_units()
	draw_cursor()
end

function handle_minimap()
	if (btnp(4)) then
		update=minimapv_update
		draw=minimapv_draw
	end
end

function handle_select() 
	if (btnp(5)) then
		
	end
end

function move_cursor()
 new_x = crsr.x
 new_y = crsr.y
	if (btnp(0)) new_x-=1
	if (btnp(1)) new_x+=1
	if (btnp(2)) new_y-=1
	if (btnp(3)) new_y+=1
	
	if (new_x < 0) then
	 if (cmra.x != 0) then
			cmra.x-=1
		end
		return
	end
	
	if (new_x > 15) then
		if (cmra.x != 100-16) then
			cmra.x+=1
		end
		return
	end
	
	if (new_y < 0) then
	 if (cmra.y != 0) then
			cmra.y-=1
		end
		return
	end
	
	if (new_y > 15) then
		if (cmra.y != 100-16) then
			cmra.y+=1
		end
		return
	end
	
	crsr.x = new_x
	crsr.y = new_y
end

function draw_cursor()
	spr(crsr.sprite,crsr.x*8,crsr.y*8)
end

function draw_units()
	for u in all(units) do
	 map_x = u.x - cmra.x
	 map_y = u.y - cmra.y
	 if (map_x >= 0 
	     and map_x <= 15
	     and map_y >=0
	     and map_y <= 15) then
			spr(u.sprite,map_x*8,map_y*8)
		end
	end
end
-->8
-- minimap view
minimap_color = {
	[river]=12,
	[sand]=15,
	[fldpln]=3
}

function minimapv_update()
	handle_close_minimap()
	handle_move_camera()
end

function minimapv_draw()
	cls()
	draw_minimap()
end

function handle_close_minimap()
	if (btnp(4)) then
		draw=strategicv_draw
		update=strategicv_update
	end
end

function handle_move_camera()
	for i=0,3 do
		if (btnp(i)) then
			local x,y = move_xy(i,cmra.x,cmra.y,5)
			cmra.x=x
			cmra.y=y
			return
		end
	end
end

function draw_minimap()
	for x=0,127 do
		for y=0,127 do
			local tile = map_tiles[x+1][y+1]
			pset(x,y,minimap_color[tile])
		end
	end
	for u in all(units) do
		pset(u.x,u.y,8)
	end
	rect(
		cmra.x,
		cmra.y,
		cmra.x+16,
		cmra.y+16,
		7
	)
end
-->8
-- game model
map_tiles={}
map_size=128

cmra={x=10,y=10}

crsr={x=8,y=8,sprite=1}

spear=7
bldg=6

units={
	{x=0,y=0,sprite=spear},
	{x=10,y=10,sprite=bldg},
	{x=9,y=9,sprite=spear},
	{x=15,y=15,sprite=spear},
	{x=0,y=127,sprite=spear}
}
__gfx__
0000000074444447f24fffffffffffffffffffffccccc676ffff11fffff11f1f0000000000000000000000000000000000000000000000000000000000000000
00000000470000742f944ffffff9fffff99ff99fc1676111fff1881fff1881a10000000000000000000000000000000000000000000000000000000000000000
0070070040000004ffffffffff279fffffffffffcc111cccfff14181ff1491910000000000000000000000000000000000000000000000000000000000000000
0007700040000004ffff44ffff2779fff9fff9ff766c6676ff14441ff11111410000000000000000000000000000000000000000000000000000000000000000
0007700040000004ff24f94ff2ff94ffffffffff1116761cf1444441128891410000000000000000000000000000000000000000000000000000000000000000
0070070040000004fffffffff2ff994fff99ffffccc111cc14441141128891410000000000000000000000000000000000000000000000000000000000000000
0000000047000074f29fff242ffff9f4ffffff9f6676c66714441141914911210000000000000000000000000000000000000000000000000000000000000000
00000000744444472ffff2f9ffffffffffffffffc1676111f111ff1f991119190000000000000000000000000000000000000000000000000000000000000000
0000000000000000f4411ffff4411fffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000
00000000000000004f1661ff4f1aa1ffff1111ffff1111ff93bb93bfffffffff0000000000000000000000000000000000000000000000000000000000000000
0000000000000000f166651ff1aaa91ff124991ff124991ff99ff99fffffffff0000000000000000000000000000000000000000000000000000000000000000
0000000000000000165776611a977aa1f121291ff121291f93b93bffffffffff0000000000000000000000000000000000000000000000000000000000000000
0000000000000000165576611a997aa11221249112212491f933bfffffffffff0000000000000000000000000000000000000000000000000000000000000000
0000000000000000f165561ff1a99a1f12711241127112419399f9bfffffffff0000000000000000000000000000000000000000000000000000000000000000
0000000000000000f4166144f41aa14419aa124115661241f93bbbffffffffff0000000000000000000000000000000000000000000000000000000000000000
00000000000000004ff114f94ff114f9f111111ff111111f939999bfffffffff0000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040404050404040406040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040405040303040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040516040315120406040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040504030314040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004040503031302060407040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000040303020204040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00090000080700d070180702307028070060700e07016070250702907030070040700d070170701d070260702a0700907010070180701f07024070260700907012070220702a0702e0701f070270702b0702d070
